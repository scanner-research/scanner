syntax = "proto3";

package scanner.proto;

// Database metadata messages
message DatabaseDescriptor {
  message BulkJob {
    int32 id = 1;
    string name = 2;
    bool committed = 3;
  }

  message Table {
    int32 id = 1;
    string name = 2;
    bool committed = 3;
  }

  int32 next_bulk_job_id = 1;
  int32 next_table_id = 2;
  repeated BulkJob bulk_jobs = 3;
  repeated Table tables = 4;
}

enum DeviceType {
  CPU = 0;
  GPU = 1;
}

enum ImageEncodingType {
  JPEG = 0;
  PNG = 1;
  BMP = 2;
  RAW = 3;
}

enum ImageColorSpace {
  Gray = 0;
  RGB = 1;
  RGBA = 2;
}

enum ColumnType {
  Other = 0;
  Video = 1;
  Image = 2;
}

enum FrameType {
  U8 = 0;
  F32 = 1;
  F64 = 2;
}

message Column {
  int32 id = 1;
  string name = 2;
  ColumnType type = 3;
}

message VideoDescriptor {
  enum VideoContainerType {
    MP4 = 0;
    NONE = 1;
  }

  enum VideoCodecType {
    H264 = 0;
    RAW = 1;
  }

  enum VideoChromaFormat {
    Monochrome = 0;
    YUV_420 = 1;
    YUV_422 = 2;
    YUV_444 = 3;
  }

  int32 table_id = 1;
  int32 column_id = 2;
  int32 item_id = 3;

  int64 frames = 4;
  int32 width = 5;
  int32 height = 6;
  int32 channels = 14;
  FrameType frame_type = 13;

  VideoCodecType codec_type = 7;
  VideoChromaFormat chroma_format = 8;
  int32 time_base_num = 15;
  int32 time_base_denom = 16;

  int64 num_encoded_videos = 17;
  repeated int64 frames_per_video = 18;
  repeated int64 keyframes_per_video = 19;
  repeated int64 size_per_video = 20;

  repeated uint64 sample_offsets = 9 [packed=true];
  repeated uint64 sample_sizes = 10 [packed=true];
  repeated uint64 keyframe_indices = 11 [packed=true];
  bytes metadata_packets = 12;
  string data_path = 21;
  bool inplace = 22;
}

message ImageFormatGroupDescriptor {
  int32 id = 1;
  ImageEncodingType encoding_type = 2;
  ImageColorSpace color_space = 3;
  int32 width = 4;
  int32 height = 5;
  int32 num_images = 7;
  repeated int64 compressed_sizes = 6 [packed=true];
}

message TableDescriptor {
  int32 id = 1;
  string name = 2;
  repeated Column columns = 3;
  // @brief the last row in each item of this table
  repeated int64 end_rows = 4;
  int32 job_id = 6;
  int64 timestamp = 7;
}

message OpInput {
  int32 op_index = 1;
  string column = 2;
}

message Op {
  string name = 1;
  repeated OpInput inputs = 2;
  bytes kernel_args = 3;
  // Used by kernels
  DeviceType device_type = 4;
  repeated int32 stencil = 5;
  int32 batch = 6;
  int32 warmup = 7;
  // Indicates this is a source
  bool is_source = 8;
}

message OutputColumnCompression {
  string codec = 1;
  map<string, string> options = 2;
}

message SourceInput {
  int32 op_index = 1;
  bytes enumerator_args = 2;
}

message SamplingArgs {
  string sampling_function = 1;
  bytes sampling_args = 2;
}

message SamplingArgsAssignment {
  int32 op_index = 1;
  // Repeated to allow for slices
  repeated SamplingArgs sampling_args = 2;
}

message Job {
  string output_table_name = 1;
  repeated SourceInput inputs = 2;
  repeated SamplingArgsAssignment sampling_args_assignment = 3;
}

message BulkJobDescriptor {
  int32 id = 1;
  string name = 2;
  int32 io_packet_size = 3;
  int32 work_packet_size = 4;
  int32 num_nodes = 5;
  repeated Job jobs = 6;
}

// Interal messages
message DecodeArgs {
  int32 width = 10;
  int32 height = 11;
  int64 start_keyframe = 6;
  int64 end_keyframe = 7;
  repeated int64 keyframes = 1;
  repeated int64 keyframe_indices = 2;
  repeated uint64 sample_offsets = 3;
  repeated uint64 sample_sizes = 4;
  repeated int64 valid_frames = 5;
  int64 encoded_video = 8;
  int64 encoded_video_size = 9;
  bytes metadata = 12;
}

message ImageDecodeArgs {
  int32 warmup_count = 1;
  int32 rows_from_start = 2;
  ImageEncodingType encoding_type = 3;
  ImageColorSpace color_space = 4;
  repeated int64 compressed_sizes = 5 [packed=true];
  repeated int64 valid_images = 6;
}

message SourceArgs {
  repeated int64 input_row_ids = 1 [packed=true];
  repeated int64 output_row_ids = 2 [packed=true];
  repeated bytes args = 3;
}

message LoadWorkEntry {
  int32 table_id = 1;
  int32 job_index = 2;
  int32 task_index = 3;
  repeated SourceArgs source_args = 4;
}

message MemoryPoolConfig {
  message Pool {
    bool use_pool = 1;
    int64 free_space = 2;
  }

  bool pinned_cpu = 1;
  Pool cpu = 3;
  Pool gpu = 4;
}

message CollectionDescriptor {
  repeated string tables = 1;
  int32 job_id = 2;
}

message CollectionsDescriptor {
  repeated int64 ids = 1;
  repeated string names = 2;
}

message FrameInfo {
  repeated int32 shape = 1;
  int32 type = 2;
}

message MachineParameters {
  int32 num_cpus = 1;
  int32 num_load_workers = 2;
  int32 num_save_workers = 3;
  repeated int32 gpu_ids = 4;
}

message PythonArgs {
  bytes py_args = 1;
}
