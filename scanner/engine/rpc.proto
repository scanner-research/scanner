syntax = "proto3";

import "scanner/metadata.proto";
package scanner.proto;

service Master {
  /// Database metadata methods

  // List table info
  rpc ListTables (Empty) returns (ListTablesResult) {}
  // Get table info
  rpc GetTables (GetTablesParams) returns (GetTablesResult) {}
  // Delete table in the database
  rpc DeleteTables (DeleteTablesParams) returns (Empty) {}
  rpc NewTable (NewTableParams) returns (Empty) {}
  rpc GetVideoMetadata (GetVideoMetadataParams) returns (GetVideoMetadataResult) {}

  /// Worker registration methods
  // Called after a new worker spawns to register with the master
  rpc RegisterWorker (WorkerParams) returns (Registration) {}
  // Called when a worker is removed
  rpc UnregisterWorker (NodeInfo) returns (Empty) {}
  rpc ActiveWorkers (Empty) returns (RegisteredWorkers) {}
  // Ingest videos into the system
  rpc IngestVideos (IngestParameters) returns (IngestResult) {}
  rpc GetJobStatus (Empty) returns (JobStatus) {}

  // Register new methods
  rpc LoadOp (OpPath) returns (Result) {}

  rpc GetOpInfo (OpInfoArgs) returns (OpInfo) {}
  rpc GetSourceInfo (SourceInfoArgs) returns (SourceInfo) {}
  rpc GetEnumeratorInfo (EnumeratorInfoArgs) returns (EnumeratorInfo) {}

  rpc RegisterOp (OpRegistration) returns (Result) {}
  rpc RegisterPythonKernel (PythonKernelRegistration) returns (Result) {}

  rpc Ping (Empty) returns (Empty) {}
  rpc Shutdown (Empty) returns (Result) {}
  rpc PokeWatchdog (Empty) returns (Empty) {}

  // Internal
  rpc NextWork (NodeInfo) returns (NewWork) {}
  rpc FinishedWork (FinishedWorkParameters) returns (Empty) {}
  rpc FinishedJob (FinishedJobParams) returns (Empty) {}
  rpc NewJob (BulkJobParameters) returns (Result) {}
}

service Worker {
  rpc NewJob (BulkJobParameters) returns (Result) {}
  rpc LoadOp (OpPath) returns (Empty) {}
  rpc RegisterOp (OpRegistration) returns (Result) {}
  rpc RegisterPythonKernel (PythonKernelRegistration) returns (Result) {}
  rpc Shutdown (Empty) returns (Result) {}
  rpc PokeWatchdog (Empty) returns (Empty) {}
  rpc Ping (Empty) returns (Empty) {}
}

message Empty {}

message Result {
  bool success = 1;
  string msg = 2;
}

message JobStatus {
  bool finished = 1;
  Result result = 2;

  int32 tasks_done = 3;
  int32 total_tasks = 4;

  int32 jobs_done = 5;
  int32 jobs_failed = 6;
  int32 total_jobs = 7;

  int32 num_workers = 8;
  int32 failed_workers = 9;
}

message ListTablesResult {
  repeated string tables = 1;
}

message GetTablesParams {
  repeated string tables = 1;
}

message GetVideoMetadataParams {
  repeated string tables = 1;
}

message GetVideoMetadataResult {
  repeated VideoDescriptor videos = 1;
}

message GetTablesResult {
  Result result = 1;
  repeated TableDescriptor tables = 2;
}

message DeleteTablesParams {
  repeated string tables = 1;
}

message NewTableRow {
  repeated bytes columns = 1;
}

message NewTableParams {
  string table_name = 1;
  repeated string columns = 2;
  repeated NewTableRow rows = 3;
}

message WorkerParams {
  string port = 1;
  MachineParameters params = 2;
}

message Registration {
  int32 node_id = 1;
}

message WorkerInfo {
  int32 id = 1;
  string address = 2;
}

message RegisteredWorkers {
  repeated WorkerInfo workers = 1;
}

message OpPath {
  string path = 1;
}

message OpRegistration {
  string name = 1;
  bool variadic_inputs = 2;
  repeated Column input_columns = 3;
  repeated Column output_columns = 4;
  bool can_stencil = 5;
  repeated int32 preferred_stencil = 6;
  bool has_bounded_state = 7;
  int32 warmup = 8;
  bool has_unbounded_state = 9;
}

message PythonKernelRegistration {
  string op_name = 1;
  DeviceType device_type = 2;
  string kernel_str = 3;
  string pickled_config = 4;
  int32 batch_size = 5;
}

message IngestParameters {
  repeated string table_names = 1;
  repeated string video_paths = 2;
  bool inplace = 3;
}

message IngestResult {
  Result result = 1;
  repeated string failed_paths = 2;
  repeated string failed_messages = 3;
}

message NodeInfo {
  int32 node_id = 1;
}

message FinishedWorkParameters {
  int32 node_id = 1;
  int64 job_id = 2;
  int64 task_id = 3;
  int64 num_rows = 4;
}

message FinishedJobParams {
  int32 node_id = 1;
  Result result = 2;
}

message BulkJobParameters {
  string job_name = 1;

  repeated Op ops = 2; // Linearized DAG of Ops
  repeated Job jobs = 3;

  // Parameters
  repeated string output_column_names = 19;
  repeated OutputColumnCompression compression = 4;
  MemoryPoolConfig memory_pool_config = 5;
  int32 pipeline_instances_per_node = 6;
  int32 io_packet_size = 7;
  int32 work_packet_size = 8;
  int32 local_id = 9;
  int32 local_total = 10;
  bool profiling = 12;
  int32 load_sparsity_threshold = 13;
  int32 tasks_in_queue_per_pu = 14;
  enum BoundaryCondition {
    REPEAT_EDGE = 0;
    REPEAT_NULL = 1;
    ERROR = 2;
  };
  BoundaryCondition boundary_condition = 15;
  float task_timeout = 16;
  int32 checkpoint_frequency = 17;

  // For master's use only
  DatabaseDescriptor db_meta = 18;
}

message NewWork {
  int32 table_id = 1;
  int32 job_index = 2;
  int32 task_index = 3;
  repeated int64 output_rows = 4 [packed=true];
  bool wait_for_work = 5;
  bool no_more_work = 6;
}

message OpInfoArgs {
  string op_name = 1;
}

message SourceInfoArgs {
  string source_name = 1;
}

message EnumeratorInfoArgs {
  string enumerator_name = 1;
}

message OpInfo {
  Result result = 1;
  bool variadic_inputs = 2;
  repeated Column input_columns = 3;
  repeated Column output_columns = 4;
}

message SourceInfo {
  Result result = 1;
  repeated Column output_columns = 4;
}

message EnumeratorInfo {
  Result result = 1;
}
