syntax = "proto3";

import "scanner/metadata.proto";
package scanner.proto;

service Master {
  // Called after a new worker spawns to register with the master
  rpc RegisterWorker (WorkerParams) returns (Registration) {}
  // Called when a worker is removed
  rpc UnregisterWorker (NodeInfo) returns (Empty) {}
  rpc ActiveWorkers (Empty) returns (RegisteredWorkers) {}
  // Ingest videos into the system
  rpc IngestVideos (IngestParameters) returns (IngestResult) {}
  rpc NextWork (NodeInfo) returns (NewWork) {}
  rpc FinishedWork (FinishedWorkParameters) returns (Empty) {}
  rpc NewJob (JobParameters) returns (Result) {}
  rpc IsJobDone (Empty) returns (JobResult) {}
  rpc Ping (Empty) returns (Empty) {}
  rpc LoadOp (OpPath) returns (Result) {}
  rpc RegisterOp (OpRegistration) returns (Result) {}
  rpc RegisterPythonKernel (PythonKernelRegistration) returns (Result) {}
  rpc GetOpInfo (OpInfoArgs) returns (OpInfo) {}
  rpc Shutdown (Empty) returns (Result) {}
  rpc PokeWatchdog (Empty) returns (Empty) {}
}

service Worker {
  rpc NewJob (JobParameters) returns (Result) {}
  rpc LoadOp (OpPath) returns (Empty) {}
  rpc RegisterOp (OpRegistration) returns (Result) {}
  rpc RegisterPythonKernel (PythonKernelRegistration) returns (Result) {}
  rpc Shutdown (Empty) returns (Result) {}
  rpc PokeWatchdog (Empty) returns (Empty) {}
  rpc Ping (Empty) returns (Empty) {}
}

message Empty {}

message Result {
  bool success = 1;
  string msg = 2;
}

message JobResult {
  bool finished = 1;
  Result result = 2;
}


message WorkerParams {
  string port = 1;
  MachineParameters params = 2;
}

message Registration {
  int32 node_id = 1;
}

message WorkerInfo {
  int32 id = 1;
  string address = 2;
}

message RegisteredWorkers {
  repeated WorkerInfo workers = 1;
}

message OpPath {
  string path = 1;
}

message OpRegistration {
  string name = 1;
  bool variadic_inputs = 2;
  repeated Column input_columns = 3;
  repeated Column output_columns = 4;
  bool can_stencil = 5;
  repeated int32 preferred_stencil = 6;
}

message PythonKernelRegistration {
  string op_name = 1;
  DeviceType device_type = 2;
  string kernel_str = 3;
}

message IngestParameters {
  repeated string table_names = 1;
  repeated string video_paths = 2;
}

message IngestResult {
  Result result = 1;
  repeated string failed_paths = 2;
  repeated string failed_messages = 3;
}

message NodeInfo {
  int32 node_id = 1;
}

message FinishedWorkParameters {
  int32 node_id = 1;
  int64 task_id = 2;
  int64 sample_id = 3;
}

message JobParameters {
  string job_name = 1;
  TaskSet task_set = 2;
  MemoryPoolConfig memory_pool_config = 3;
  int32 pipeline_instances_per_node = 4;
  int32 io_item_size = 5;
  int32 work_item_size = 6;
  int32 local_id = 7;
  int32 local_total = 8;
  bool show_progress = 10;
  bool profiling = 11;
  int32 load_sparsity_threshold = 12;
  int32 tasks_in_queue_per_pu = 13;
}

message NewWork {
  IOItem io_item = 1;
  LoadWorkEntry load_work = 2;
};

message OpInfoArgs {
  string op_name = 1;
}

message OpInfo {
  Result result = 1;
  bool variadic_inputs = 2;
  repeated Column input_columns = 3;
  repeated Column output_columns = 4;
}
